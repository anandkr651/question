1.what is html
html is the standard markup language for creating a web page. html elements tell the browser how to display the content. an html element is defined by a start tag, some content and an end tag.

2.inline and block element
inline element just take up the space that is absolute necessary
eg:- <span> <a> <strong> <img> <button> <em> <select> <abbr> <label> <sub>
block element start on a new line and consume the full width of the page availabel.
eg:- <div> <p> <header> <footer> <h1...h6> <form> <tabel> <video> <blockQuote> <pre> <ul> <ol> <figCaption> <figure> <hr> <article> <section>

DOCTYPE(document type) declaration specifies the version of html. DOCTYPE tells the browser which version of html it is and how to interpret the code.

meta tags in html are element used to provide metatags or additional information about a web page.

semantic element in html are element that provide meaning to the content they contain 

what are selector in css? how many types of selector are there?
selector are pattern that are used to select and style html elements
id selector(#)
class selector(.)
universal selector(*)
child selector(>)
descendant selector
element selector

javascript --> javascript is a high level programming Language. that is widely used to create interactive effect within a web browser. a highlevel language is a human understandable language it is commonly used for developing both web and mobile applications

28. What are Template Literals in JavaScript?
Template Literals denoted with “(backticks) were introduced in ES6. By using Template Literals we can easily concatenate strings. All we have to do is put the expression inside ‘${}’. This will help get rid of using the ‘+’ operator.

Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).
The let and const Keywords
Variables defined with let and const are hoisted to the top of the block, but not initialized.
Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.

event bubbling --> a propagation mde where events are handeled from the innermost elements to the outermost.
event capturing --> a propagation mde where events are handeled from the outermost elements to the innermost.

lexical scope --> when a child function can access the parent variable then it said to be lexical scope.
function outer() {
  let outerVar = "I'm from outer!";
  function inner() {
    console.log(outerVar); // ✅ Can access outerVar because of lexical scope
  }
  inner();
}
outer();


Closure scope --> A function that "remembers" variables from its outer (lexical) scope, even after that outer function is gone.
function outer() {
  let counter = 0;
  return function inner() {
    counter++;
    console.log(counter);
  }
}
const count = outer(); // outer() returns inner()
count(); // 1
count(); // 2
count(); // 3

setTimeOut --> used to execute a function once after a specificed delay.
setInterval -->used to execute a function repeatedly at specified interval.

promises --> promises handled asynchronous tasks in js by providing a more readable and structure approach than callback for handling outputs.
const ticket = new promise(function(resolve,rejected){
    let isboarding = false
    if(isboarding){
        resolve("you are in flight")
    }else{
        rejected("you are not in flight)
    }
})
ticket.then((data)=>{
    console.log("wooo",data)
}).catch((data)=>{
    console.log("ohhhh",data)
}).finally(()=>{
    console.log("i always executed")
})

async --> declaring a function with async makes it return a promise.
await --> it pauses the execution of the code until the promise it is wating for it resolve then return the resolved value.