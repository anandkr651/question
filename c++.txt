C++ is an object-oriented programming language developed to address the limitations of the C programming language. By "object-oriented," we refer to its use of key principles such as polymorphism, inheritance, abstraction, encapsulation, objects, and classes.

‘std’ is also known as Standard or it can be interpreted as a namespace. The command “using namespace std” informs the compiler to add everything under the std namespace and inculcate them in the global namespace. This all inculcation of global namespace benefits us to use “cout” and “cin” without using “std::_operator_”.

In C++ after the header files, we often use ‘using namespace std;‘. The reason behind it is that all of the standard library definitions are inside the namespace std. As the library functions are not defined at global scope, so in order to use them we use namespace std. So, that we don’t need to write STD:: at every line (eg. STD::cout etc.).
insertion operator(<<)  extraction operator(>>)

Variables is a name given to a memory location. It is the basic unit of storage in a program.The value stored in a variable can be changed during program execution.A variable is only a name given to a memory location, all the operations done on the variable effects that memory location.all the variables must be declared before use.

All variables use data type during declaration to restrict the type of data to be stored. Therefore, we can say that data types are used to tell the variables the type of data they can store. the compiler allocates some memory for that variable based on the data type with which it is declared. Every data type requires a different amount of memory. 
C++ supports the following data types:

Primary or Built-in or Fundamental data type
Derived data types
User-defined data types
Data Types in C++ are Mainly Divided into 3 Types: 
1. Primitive Data Types: These data types are built-in or predefined data types and can be used directly by the user to declare variables. example: int, char, float, bool, etc. Primitive data types available in C++ are: 

Integer
Character
Boolean
Floating Point
Double Floating Point
Valueless or Void
Wide Character
2. Derived Data Types: Derived data types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types. These can be of four types namely: 

Function
Array
Pointer
Reference
3. Abstract or User-Defined Data Types: Abstract or User-Defined data types are defined by the user itself. Like, defining a class in C++ or a structure. C++ provides the following user-defined datatypes:  

Class
Structure
Union
Enumeration
Typedef defined Datatype

1. Function
A Function is a block of code or program segment that is defined to perform a specific well-defined task. A function is generally defined to save the user from writing the same lines of code again and again for the same input. All the lines of code are put together inside a single function and this can be called anywhere required.it is identified by a name (identifire) followed by the parenthesis. main() is a default function that is defined in every program of C++.
2. Array
An Array is a collection of similar types of items stored at continuous memory locations. The idea of array is to represent many instances in one variable.
3. Pointers
it is a variable which hold the address of another variable.an identifier preceded with * symbol is called pointer.
4. Reference
When a variable is declared as reference, it becomes an alternative name for an existing variable. A variable can be declared as reference by putting ‘&’ in the declaration.

difference between reference and pointer:
It cannot work with arrays
It can work with arrays
To access the members of class/struct it uses a ‘ . ‘	
To access the members of class/struct it uses a ‘ -> ‘ 
It is referring to another variable.
It is storing the address of the variable.

1. Class
It is a user-defined data type, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object.
2. Structure
A Structure is a user-defined data type. A structure creates a data type that can be used to group items of possibly different types into a single type.
3. Union
Union a user-defined data type. In union, all members share the same memory location.
4. Enumeration
Enumeration (or enum) is a user-defined data type. It is mainly used to assign names to integral constants, the names make a program easy to read and maintain. It is used to define variables that can only take one of the predefined values,
Practical Use Case
Enums are often used for:
Defining states (e.g., traffic light states).

// Program to demonstrate working 
// of enum in C++ 
#include <iostream> 
using namespace std; 

enum week { Mon, Tue, Wed, Thur, Fri, Sat, Sun }; 

int main() 
{ 
	enum week day; 
	day = Wed; 
	cout << day; 
	return 0; 
}
An operator is a symbol that operates on a value to perform specific mathematical or logical computations. 

// C++ Program to demonstrate strings
#include <iostream>
using namespace std;
int main()
{
    char s[] = "GeeksforGeeks";
    cout << s << endl;
    return 0;
}

// C++ program to create std::string objects
#include <iostream>
using namespace std;
int main()
{
    string s = "GeeksforGeeks";
    string str("GeeksforGeeks");
    cout << str;
    return 0;
}

// C++ Program to demonstrate string input using cin
#include <iostream>
using namespace std;

int main() {
    string s;
    cout<<"Enter String"<<endl;
    cin>>s;
    cout<<"String is: "<<s<<endl;
    return 0;
}

// C++ Program to demonstrate use of getline function
#include <iostream>
using namespace std;

int main()
{
    string s;
    cout << "Enter String" << endl;
    getline(cin, s);
    cout << "String is: " << s << endl;
    return 0;
}

// C++ Program to demonstrate use of stringstream object
#include <iostream>
#include <sstream>
#include<string>
using namespace std;

int main()
{
    string s = " GeeksforGeeks to the Moon ";
    stringstream obj(s);
    // string to store words individually
    string temp;
    // >> operator will read from the stringstream object
    while (obj >> temp) {
        cout << temp << endl;
    }
    return 0;
}

Object-oriented programming – As the name suggests uses objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism, etc. in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.

Object
An Object is an entity with some characteristics and behavior. An Object is an instance of a Class. When a class is defined, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated.

Encapsulation
Encapsulation is defined as binding together the data and the functions that manipulate them.

Abstraction
providing only essential information about the data to the outside world, hiding the background details or implementation


#include <iostream>
using namespace std;

// Class demonstrating abstraction and encapsulation
class Calculator {
private:
    // Encapsulation: Private data members
    int a, b;

public:
    // Constructor to set values
    Calculator(int x, int y) : a(x), b(y) {}

    // Public method for abstraction: Exposes functionality without details
    int add() {
        return a + b;
    }

    int subtract() {
        return a - b;
    }
};

int main() {
    // Creating a Calculator object
    Calculator calc(10, 5);

    // Abstraction: User interacts with high-level methods
    cout << "Addition: " << calc.add() << endl;        // 10 + 5 = 15
    cout << "Subtraction: " << calc.subtract() << endl; // 10 - 5 = 5

    // Encapsulation: Can't directly access 'a' or 'b'
    // cout << calc.a;  // Error: 'a' is private

    return 0;
}

Polymorphism
The word polymorphism means having many forms. the ability of a message to be displayed in more than one form.

Inheritance
The capability of a class to derive properties and characteristics from another class is called Inheritance.

Constructors
Constructors are special class members which are called by the compiler every time an object of that class is instantiated. Constructors have the same name as the class and may be defined inside or outside the class definition.

Destructors
Destructor is another special member function that is called by the compiler when the scope of the object ends. It deallocates all the memory previously used by the object of the class so that there will be no memory leaks. The destructor also have the same name as the class but with tilde(~) as prefix.
Characteristics of a Destructor
A destructor is also a special member function like a constructor. Destructor destroys the class objects created by the constructor. 
Destructor has the same name as their class name preceded by a tilde (~) symbol.
It is not possible to define more than one destructor.
The destructor is only one way to destroy the object created by the constructor. Hence, destructor cannot be overloaded.
It cannot be declared static or const.
Destructor neither requires any argument nor returns any value.
It is automatically called when an object goes out of scope. 
Destructor release memory space occupied by the objects created by the constructor.
In destructor, objects are destroyed in the reverse of an object creation.

Why do we give semicolons at the end of class?
Many people might say that it’s a basic syntax and we should give a semicolon at the end of the class as its rule defines in cpp. But the main reason why semi-colons are there at the end of the class is compiler checks if the user is trying to create an instance of the class at the end of it. 
Yes just like structure and union, we can also create the instance of a class at the end just before the semicolon. As a result, once execution reaches at that line, it creates a class and allocates memory to your instance.

Features of Encapsulation
Below are the features of encapsulation:

We can not access any function from the class directly. We need an object to access that function that is using the member variables of that class. 
The function which we are making inside the class must use only member variables, only then it is called encapsulation.
If we don’t make a function inside the class which is using the member variable of the class then we don’t call it encapsulation.
Encapsulation improves readability, maintainability, and security by grouping data and methods together.
It helps to control the modification of our data members.

There are 3 types of access modifiers available in C++: 

Public
Private
Protected

Note: If we do not specify any access modifiers for the members inside the class, then by default the access modifier for the members will be Private. 

1. Public: All the class members declared under the public specifier will be available to everyone. The data members and member functions declared as public can be accessed by other classes and functions too. 

2. Private: The class members declared as private can be accessed only by the member functions inside the class. They are not allowed to be accessed directly by any object or function outside the class. Only the member functions or the friend functions/ friend class are allowed to access the private data members of the class. 

3. Protected: The protected access modifier is similar to the private access modifier in the sense that it can’t be accessed outside of its class unless with the help of a friend class. The difference is that the class members declared as Protected can be accessed by any subclass (derived class) of that class as well. 

Difference between Abstraction and Encapsulation:
Abstraction is the process or method of gaining the information.
While encapsulation is the process or method to contain the information.
We can implement abstraction using abstract class and interfaces.
Whereas encapsulation can be implemented using by access modifier i.e. private, protected and public.
In abstraction, implementation complexities are hidden using abstract classes and interfaces.
While in encapsulation, the data is hidden using methods of getters and setters.

Types of Polymorphism
Compile-time Polymorphism --A. Function Overloading  B. Operator Overloading
Runtime Polymorphism -- A. Function Overriding B. Virtual Function
A. Function Overloading
When there are multiple functions with the same name but different parameters, then the functions are said to be overloaded, hence this is known as Function Overloading.

#include <iostream>
using namespace std;
class s{
    public:
    // Function overloading example
void greet() {
    cout << "Hello!" << endl;
}
void greet(string name) {
    cout << "Hello, " << name << "!" << endl;
}
void greet(string name, int age) {
    cout << "Hello, " << name << "! You are " << age << " years old." << endl;
}
};
int main() {
    // Calling the overloaded functions
    s anand;
    anand.greet();                       // Output: Hello!
    anand.greet("Alice");                // Output: Hello, Alice!
    anand.greet("Bob", 25);              // Output: Hello, Bob! You are 25 years old.
    return 0;
}


B. Operator Overloading
Operator overloading is when you define or change the behavior of an operator (like +, -, *, etc.) for a custom data type or class in programming. C++ has the ability to provide the operators with a special meaning for a data type, this ability is known as operator overloading.
#include<iostream>
using namespace std;
class complex{
    private:
    int real,imag;
    public:
    complex(int x,int y){
        real=x;
        imag=y;
    }
    void display(){
        cout<<real<<" + "<<imag<<"i";
    }
    complex(){}
    complex operator+ (complex &y){
        complex t;
        t.real=real * y.real;
        t.imag=imag * y.imag;
        return t;
    }
};
int main(){
    complex c1(2,4),c2(3,9);
    complex c3=c1+c2;
    c3.display();
}
/*6 + 36i
PS D:\cpp\friend function> */


A. Function Overriding
Function Overriding occurs when a derived class has a definition for one of the member functions of the base class. That base function is said to be overridden.
// C++ program for function overriding with data members
#include <bits/stdc++.h>
using namespace std;

class base
{
public:
    virtual void print()
    {
        cout << "i am print base class" << endl;
    }
   virtual void display()
    {
        cout << "i am display base class" << endl;
    }
};
class derive : public base
{
public:
    void print()
    {
        cout << "i am print derive class" << endl;
    }
    void display()
    {
        cout << "i am display derive class" << endl;
    }
};
int main()
{
    base *ptr;
    derive der;
    ptr = &der;
    ptr->display();
    ptr->print();
    return 0;
}
/*i am display derive class
i am print derive class  
PS D:\cpp\polymorphism>*/

B. Virtual Function
A virtual function is a member function that is declared in the base class using the keyword virtual and is re-defined (Overridden) in the derived class.
#include <bits/stdc++.h>
using namespace std;

class base
{
public:
    void print()
    {
        cout << "i am print base class" << endl;
    }
    void display()
    {
        cout << "i am display base class" << endl;
    }
};
class derive : public base
{
public:
    void print()
    {
        cout << "i am print derive class" << endl;
    }
    void display()
    {
        cout << "i am display derive class" << endl;
    }
};
int main()
{
    base *ptr;
    derive der;
    ptr = &der;
    ptr->display();
    ptr->print();
    return 0;
}
/*i am display base class
i am print base class  
PS D:\cpp\polymorphism>*/

Difference between Inheritance and Polymorphism:

Inheritance is one in which a new class is created (derived class) that inherits the features from the already existing class(Base class).
Whereas polymorphism is that which can be defined in multiple forms.
It is basically applied to classes.
Whereas it is basically applied to functions or methods.
Inheritance supports the concept of reusability and reduces code length in object-oriented programming.	
Polymorphism allows the object to decide which form of the function to implement at compile-time (overloading) as well as run-time (overriding).
Inheritance can be single, hybrid, multiple, hierarchical and multilevel inheritance.
Whereas it can be compiled-time polymorphism (overload) as well as run-time polymorphism (overriding).

Types of Inheritance:

Single Inheritance: When a derived class inherits the properties of a single base class, it is known as Single Inheritance.
Multiple Inheritance: When a derived class inherits the properties of multiple base classes, it is known as Multiple Inheritance.
Multilevel Inheritance: When a derived class inherits the properties of another derived class, it is known as Multilevel Inheritance.
Hierarchical Inheritance: When more than one derived class inherits the properties of a single base class, it is known as Hierarchical Inheritance.
Hybrid (Virtual) Inheritance: When we combine more than one type of inheritance, it is known as Hybrid (Virtual) Inheritance. Example: Combining Multilevel and Hierarchical inheritance.

new vs malloc()
#include<iostream>
using namespace std;
int main()
{
	// Initialization with new()
	int *n = new int(10); 
	cout << *n;
	return 0;
}
Output: 
10

size is calculated by compiler	
size is calculated manually
It is an operator	
It is a function
calls constructor	
does not calls constructors              
Returns exact data type	
Returns void *
on failure, Throws bad_alloc exception 
On failure, returns NULL

Difference Between Class And Object:
Class is used as a template for declaring and creating the objects.
An object is an instance of a class.
When a class is created, no memory is allocated.
Objects are allocated memory space whenever they are created.
The class has to be declared first and only once.	
An object is created many times as per requirement.
A class is a logical entity.	
An object is a physical entity.
It is declared with the class keyword	
It is created with a class name in C++ 

Syntax: Declaring Class in C++ is as follows: 

class Student {
   public:
      void put(){
          cout<<“Function Called”<<endl;
      }
};   // The class is declared here

int main(){
         Student s1;   // Object created
         s1.put();
}
Example: Bike	Example: Ducati, Suzuki, Kawasaki

Difference Between class and structure in C++
Members of a class are private by default.
Members of a structure are public by default.
It is declared using the class keyword.
It is declared using the struct keyword.
It is normally used for data abstraction and inheritance.
It is normally used for the grouping of different datatypes.
Memory is allocated on the stack.
Memory is allocated on the heap.

STL stands for Standard template library and is the collection of some most commonly used algorithms and data structures such as vectors, maps, etc. It is a generalized library that works for all data types. STL has 4 components.

C++ gives a feature that allows functions and classes to operate with generic types in the form of templates. We only have to write the code of a function or a class once and it will be able to operate on different data types.

The Containers in STL are class templates using which we implement data structures like a queue, stack, etc. These containers act similarly to their corresponding data structure, manage the storage space for its elements and provide member functions to access them.

Algorithms in STL is a library that contains some commonly used methods predefined as function templates. 

Vectors are a dynamic array-like data structure that stores elements of the same data type in a contiguous fashion that can resize itself automatically unlike arrays which mean vectors can grow when an element is inserted or shrink when an element is deleted.